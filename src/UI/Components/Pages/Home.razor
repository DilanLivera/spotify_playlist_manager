@page "/"
@using UI.Infrastructure.Spotify
@using UI.Models
@inject SpotifyService SpotifyService
@inject SpotifyAuthSessionManager SpotifyAuthSessionManager
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>My Playlists</PageTitle>

<div class="p-8">
    <div class="max-w-7xl mx-auto">
        <h1 class="text-3xl font-bold text-white mb-8">My Playlists</h1>

        @if (_loading)
        {
            <div class="flex justify-center">
                <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-500"></div>
            </div>
        }
        else if (_playlists.Count == 0)
        {
            <div class="bg-[#232a3b] p-6 rounded-lg shadow-lg">
                <p class="text-gray-400 text-center">
                    No playlists found. Make sure you have playlists in your Spotify account.
                </p>
            </div>
        }
        else
        {
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (SpotifyPlaylist? playlist in _playlists)
                {
                    <div class="bg-[#232a3b] rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 cursor-pointer"
                         @onclick="() => NavigateToPlaylist(playlist.Id)">
                        <div class="aspect-square overflow-hidden">
                            @if (!string.IsNullOrEmpty(playlist.GetPlaylistImageUrl()))
                            {
                                <img src="@playlist.GetPlaylistImageUrl()"
                                     alt="@playlist.Name"
                                     class="w-full h-full object-cover"/>
                            }
                            else
                            {
                                <div class="w-full h-full flex items-center justify-center bg-gray-700">
                                    <svg class="w-16 h-16 text-gray-500"
                                         fill="currentColor"
                                         viewBox="0 0 20 20"
                                         xmlns="http://www.w3.org/2000/svg">
                                        <path d="M18 3a1 1 0 00-1.196-.98l-10 2A1 1 0 006 5v9.114A4.369 4.369 0 005 14c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2V7.82l8-1.6v5.894A4.37 4.37 0 0015 12c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2V3z"/>
                                    </svg>
                                </div>
                            }
                        </div>
                        <div class="p-4">
                            <h3 class="text-xl font-semibold text-white mb-1 truncate">
                                @playlist.Name
                            </h3>
                            <p class="text-gray-400 text-sm mb-2 line-clamp-2">
                                @(string.IsNullOrEmpty(playlist.Description) ? "No description" : playlist.Description)
                            </p>
                            <div class="flex items-center text-gray-500 text-sm">
                                <svg class="w-4 h-4 mr-1"
                                     fill="currentColor"
                                     viewBox="0 0 20 20"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z"/>
                                </svg>
                                @playlist.Tracks.Total tracks
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<SpotifyPlaylist> _playlists = [];
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        if (!SpotifyAuthSessionManager.IsAuthenticated())
        {
            NavigationManager.NavigateTo(uri: "/spotify-auth");
            return;
        }

        await LoadPlaylistsAsync();
    }

    private async Task LoadPlaylistsAsync()
    {
        _loading = true;

        _playlists = await SpotifyService.GetUserPlaylistsAsync();

        _loading = false;
    }

    private void NavigateToPlaylist(string playlistId) => NavigationManager.NavigateTo(uri: $"/playlist/{playlistId}");
}
