@page "/weather"
@attribute [Authorize]
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<div class="p-8">
    <div class="max-w-6xl mx-auto">
        <div class="p-8">
            <div class="flex items-center gap-3 mb-8">
                <svg class="w-8 h-8 text-blue-500"
                     fill="none"
                     stroke="currentColor"
                     viewBox="0 0 24 24">
                    <path stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"/>
                </svg>
                <h1 class="text-3xl font-bold text-white">
                    Weather Forecast
                </h1>
            </div>

            <p class="text-gray-400 mb-8">
                This component demonstrates fetching and displaying weather forecast data.
            </p>

            @if (_forecasts == null)
            {
                <div class="flex justify-center items-center p-12">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500">
                    </div>
                </div>
            }
            else
            {
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                        <tr class="text-left border-b border-gray-700">
                            <th class="p-4 text-gray-400 font-semibold">Date</th>
                            <th class="p-4 text-gray-400 font-semibold">Temp. (C)</th>
                            <th class="p-4 text-gray-400 font-semibold">Temp. (F)</th>
                            <th class="p-4 text-gray-400 font-semibold">Summary</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (WeatherForecast? forecast in _forecasts)
                        {
                            <tr class="border-b border-gray-700/50 hover:bg-gray-700/30 transition-colors duration-200">
                                <td class="p-4 text-gray-300">
                                    @forecast.Date.ToShortDateString()
                                </td>
                                <td class="p-4">
                                    <span class="text-blue-500 font-semibold">
                                        @forecast.TemperatureC°
                                    </span>
                                </td>
                                <td class="p-4">
                                    <span class="text-gray-300">
                                        @forecast.TemperatureF°
                                    </span>
                                </td>
                                <td class="p-4">
                                    <span class="px-3 py-1 rounded-full text-sm @(GetSummaryClass(forecast.Summary))">
                                        @forecast.Summary
                                    </span>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>

                <div class="mt-8 text-gray-400 text-sm">
                    <p>* Temperature data is randomly generated for demonstration purposes.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private WeatherForecast[]? _forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        DateOnly startDate = DateOnly.FromDateTime(DateTime.Now);
        string[] summaries = ["Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"];
        _forecasts = Enumerable.Range(1, 5)
                               .Select(index => new WeatherForecast
                                {
                                    Date = startDate.AddDays(index),
                                    TemperatureC = Random.Shared.Next(-20, 55),
                                    Summary = summaries[Random.Shared.Next(summaries.Length)]
                                })
                               .ToArray();
    }

    private string GetSummaryClass(string? summary) => summary switch
    {
        "Freezing" => "bg-blue-500/20 text-blue-400",
        "Bracing" => "bg-cyan-500/20 text-cyan-400",
        "Chilly" => "bg-teal-500/20 text-teal-400",
        "Cool" => "bg-green-500/20 text-green-400",
        "Mild" => "bg-yellow-500/20 text-yellow-400",
        "Warm" => "bg-orange-500/20 text-orange-400",
        "Balmy" => "bg-red-500/20 text-red-400",
        "Hot" => "bg-red-600/20 text-red-500",
        "Sweltering" => "bg-purple-500/20 text-purple-400",
        "Scorching" => "bg-pink-500/20 text-pink-400",
        _ => "bg-gray-500/20 text-gray-400"
    };

    private class WeatherForecast
    {
        public DateOnly Date { get; init; }
        public int TemperatureC { get; init; }
        public string? Summary { get; init; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}
